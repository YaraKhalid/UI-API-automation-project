{
  "stats": {
    "suites": 2,
    "tests": 23,
    "passes": 20,
    "pending": 0,
    "failures": 3,
    "start": "2025-07-08T21:47:04.176Z",
    "end": "2025-07-08T21:47:04.280Z",
    "duration": 104,
    "testsRegistered": 23,
    "passPercent": 86.95652173913044,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "377c38a2-26ff-4799-b3e0-510c6dfd5387",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2a3c7299-b21e-4fe9-9e49-8cac0a6acaf9",
          "title": "Test Suite 1 - Verify that API Routes for mock-user-auth return correctly (Valid paths)",
          "fullFile": "/Users/yara.sayed1/Documents/my-auth-tests/test/auth.test.js",
          "file": "/test/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CREATE USER - Valid",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth return correctly (Valid paths) CREATE USER - Valid",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Create User Response\",\n  \"value\": {\n    \"message\": \"User registered with success\"\n  }\n}",
              "code": "request(BASE_URL)\n    .post(create_EndPoint)\n    .send({ name, email, password })\n    .expect(200)  // Should be 201 but it's 200 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n        expect(res.body.message).to.equal('User registered with success');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Create User Response', value: res.body });\n        if (err) return done(err);\n        done();\n    });",
              "err": {},
              "uuid": "c716bb37-5628-462e-aa91-c649a93df029",
              "parentUUID": "2a3c7299-b21e-4fe9-9e49-8cac0a6acaf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AUTH USER - Valid",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth return correctly (Valid paths) AUTH USER - Valid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Auth User Response\",\n  \"value\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InVzZXJfMTc1MjAxMTIyNDE3MUBleGFtcGxlLmNvbSIsImlkIjo2MDMwMywiaWF0IjoxNzUyMDExMjI0LCJleHAiOjE3NTIwOTc2MjR9.yPj9TD9NhXj-uOIW3H_asmQur_cMOvie0t_fNy43FRw\"\n  }\n}",
              "code": "request(BASE_URL)\n    .post(auth_EndPoint)\n    .send({ email, password })\n    .expect(200) \n    .expect(res => {\n        expect(res.body).to.have.property('token');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Auth User Response', value: res.body });\n        if (err) return done(err);\n        token = res.body.token; // Save token for next tests\n        done();\n    });",
              "err": {},
              "uuid": "60ea71ac-15ac-49ee-9e70-9d6849922dcc",
              "parentUUID": "2a3c7299-b21e-4fe9-9e49-8cac0a6acaf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH USER - Valid",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth return correctly (Valid paths) PATCH USER - Valid",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Patch User Response\",\n  \"value\": {\n    \"data\": {\n      \"id\": 60303,\n      \"name\": \"Updated_Yara_name\",\n      \"email\": \"user_1752011224171@example.com\",\n      \"password\": \"pass_f9ypgok6\",\n      \"imageUrl\": \"https://almsaeedstudio.com/themes/AdminLTE/dist/img/user2-160x160.jpg\"\n    },\n    \"message\": \"User updated with success!\"\n  }\n}",
              "code": "request(BASE_URL)\n    .patch(patch_EndPoint)\n    .set('Authorization', token) \n    .send({ name: \"Updated_Yara_name\", email, password })\n    .expect(200)\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n        expect(res.body.message).to.equal('User updated with success!');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Patch User Response', value: res.body });\n        if (err) return done(err);\n        done();\n    });",
              "err": {},
              "uuid": "3130ad7d-05a0-4145-b40f-f4746233cf1f",
              "parentUUID": "2a3c7299-b21e-4fe9-9e49-8cac0a6acaf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET USER - Valid",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth return correctly (Valid paths) GET USER - Valid",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Get User Response\",\n  \"value\": {\n    \"id\": 60303,\n    \"name\": \"Updated_Yara_name\",\n    \"email\": \"user_1752011224171@example.com\",\n    \"password\": \"pass_f9ypgok6\",\n    \"imageUrl\": \"https://almsaeedstudio.com/themes/AdminLTE/dist/img/user2-160x160.jpg\"\n  }\n}",
              "code": "request(BASE_URL)\n    .get(get_EndPoint)\n    .set('Authorization', token)\n    .expect(200)\n    .expect(res => {\n        expect(res.body).to.have.property('name');\n        expect(res.body).to.have.property('email');\n        expect(res.body).to.have.property('id');\n        expect(res.body).to.have.property('password');\n        expect(res.body).to.have.property('imageUrl');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Get User Response', value: res.body });\n        if (err) return done(err);\n        done();\n    });",
              "err": {},
              "uuid": "13122266-816c-49fa-b66d-a868d38ce19a",
              "parentUUID": "2a3c7299-b21e-4fe9-9e49-8cac0a6acaf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE USER - Valid",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth return correctly (Valid paths) DELETE USER - Valid",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Delete User Response\",\n  \"value\": {\n    \"message\": \"User deleted with success!\"\n  }\n}",
              "code": "request(BASE_URL)\n    .delete(deleteUser_EndPoint)\n    .set('Authorization', token)\n    .expect(200)\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n        expect(res.body.message).to.equal('User deleted with success!');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Delete User Response', value: res.body });\n        if (err) return done(err);\n        done();\n    });",
              "err": {},
              "uuid": "951309b2-e4d4-4f92-9af6-5d24ddcd1570",
              "parentUUID": "2a3c7299-b21e-4fe9-9e49-8cac0a6acaf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE ALL USERS - Valid",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth return correctly (Valid paths) DELETE ALL USERS - Valid",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Delete All Users Response\",\n  \"value\": {\n    \"message\": \"Users deleted with success\"\n  }\n}",
              "code": "request(BASE_URL)\n    .delete(deleteAllUsers_EndPoint)\n    .set('Content-Type', 'application/json') // for authorization\n    .send({ key_admin: 'keyadmin123' }) //  include required body\n    .expect(200)\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n        expect(res.body.message).to.equal('Users deleted with success');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Delete All Users Response', value: res.body });\n        if (err) return done(err);\n        done();\n    });",
              "err": {},
              "uuid": "c7411310-170e-44e7-a033-e8c66941d216",
              "parentUUID": "2a3c7299-b21e-4fe9-9e49-8cac0a6acaf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CREATE USER - Valid",
              "fullTitle": "Test Suite 1 - Verify that API Routes for mock-user-auth return correctly (Valid paths) CREATE USER - Valid",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Create User Response\",\n  \"value\": {\n    \"message\": \"User registered with success\"\n  }\n}",
              "code": "request(BASE_URL)\n    .post(create_EndPoint)\n    .send({ name, email, password })\n    .expect(200)  // Should be 201 but it's 200 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n        expect(res.body.message).to.equal('User registered with success');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Create User Response', value: res.body });\n        if (err) return done(err);\n        done();\n    });",
              "err": {},
              "uuid": "c062104b-22f3-4667-96db-d088ca2c66ea",
              "parentUUID": "2a3c7299-b21e-4fe9-9e49-8cac0a6acaf9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c716bb37-5628-462e-aa91-c649a93df029",
            "60ea71ac-15ac-49ee-9e70-9d6849922dcc",
            "3130ad7d-05a0-4145-b40f-f4746233cf1f",
            "13122266-816c-49fa-b66d-a868d38ce19a",
            "951309b2-e4d4-4f92-9af6-5d24ddcd1570",
            "c7411310-170e-44e7-a033-e8c66941d216",
            "c062104b-22f3-4667-96db-d088ca2c66ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 60,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
          "title": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly",
          "fullFile": "/Users/yara.sayed1/Documents/my-auth-tests/test/auth.test.js",
          "file": "/test/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CREATE USER - Missing name and password",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly CREATE USER - Missing name and password",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Create User with Missing Fields\",\n  \"value\": {\n    \"message\": \"User already registered\"\n  }\n}",
              "code": "request(BASE_URL)\n    .post(create_EndPoint)\n    .send({ email }) // Missing name and password\n    .expect(401)\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Create User with Missing Fields', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "e910a495-cb36-4f45-b614-e452a5b8f0fd",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CREATE USER - No Fields",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly CREATE USER - No Fields",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Create User with Missing Fields\",\n  \"value\": {\n    \"message\": \"User registered with success\"\n  }\n}",
              "code": "request(BASE_URL)\n    .post(create_EndPoint)\n    .expect(401)\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Create User with Missing Fields', value: res.body });\n        done(err);\n    });",
              "err": {
                "message": "Error: expected 401 \"Unauthorized\", got 200 \"OK\"",
                "estack": "Error: expected 401 \"Unauthorized\", got 200 \"OK\"\n    at Context.<anonymous> (test/auth.test.js:178:14)\n    at processImmediate (node:internal/timers:466:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:310:14)\n    at /Users/yara.sayed1/Documents/my-auth-tests/node_modules/supertest/lib/test.js:366:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:343:13)\n    at Test.assert (node_modules/supertest/lib/test.js:196:23)\n    at localAssert (node_modules/supertest/lib/test.js:139:14)\n    at /Users/yara.sayed1/Documents/my-auth-tests/node_modules/supertest/lib/test.js:157:7\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/yara.sayed1/Documents/my-auth-tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at IncomingMessage.emit (node:events:539:35)\n    at endReadableNT (node:internal/streams/readable:1345:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                "diff": null
              },
              "uuid": "d614d83f-5e74-460e-9947-95a4112940ad",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "CREATE USER - already created",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly CREATE USER - already created",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Created User Response\",\n  \"value\": {\n    \"message\": \"User registered with success\"\n  }\n}",
              "code": "request(BASE_URL)\n   // create the following user in terminal before running this test case\n    .post(create_EndPoint)\n    .send({ name: 'John Doe',\n            email: 'johndoe@example.com',\n            password: 'securePass123' })\n    .expect(409) \n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Created User Response', value: res.body });\n        if (err) return done(err);\n        done();\n    });",
              "err": {
                "message": "Error: expected 409 \"Conflict\", got 200 \"OK\"",
                "estack": "Error: expected 409 \"Conflict\", got 200 \"OK\"\n    at Context.<anonymous> (test/auth.test.js:196:14)\n    at processImmediate (node:internal/timers:466:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:310:14)\n    at /Users/yara.sayed1/Documents/my-auth-tests/node_modules/supertest/lib/test.js:366:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:343:13)\n    at Test.assert (node_modules/supertest/lib/test.js:196:23)\n    at localAssert (node_modules/supertest/lib/test.js:139:14)\n    at /Users/yara.sayed1/Documents/my-auth-tests/node_modules/supertest/lib/test.js:157:7\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/yara.sayed1/Documents/my-auth-tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at IncomingMessage.emit (node:events:539:35)\n    at endReadableNT (node:internal/streams/readable:1345:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                "diff": null
              },
              "uuid": "0bb477c7-efb5-4b66-9f38-454ffd125d03",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AUTH USER - invalid credentials",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly AUTH USER - invalid credentials",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Auth User Invalid Credentials\",\n  \"value\": {\n    \"message\": \"Incorrect email or password\"\n  }\n}",
              "code": "request(BASE_URL)\n    .post(auth_EndPoint)\n    .set('Content-Type', 'application/json')\n    .send({ email: invalidEmail, password: invalidPassword }) //wrong credintioals\n    .expect(401)          // Expexted 400 bad request, but it's 401 on Mock API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Auth User Invalid Credentials', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "71cc0aab-e8ab-423e-add1-ed665a323291",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AUTH USER - missing credentials",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly AUTH USER - missing credentials",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Auth User Invalid Credentials\",\n  \"value\": {\n    \"message\": \"Incorrect email or password\"\n  }\n}",
              "code": "request(BASE_URL)\n    .post(auth_EndPoint)\n    .set('Content-Type', 'application/json')\n    .send({ email: email }) //missing credintioals\n    .expect(401)    // Expexted 400 bad request, but it;s 401 on Mock API      \n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Auth User Invalid Credentials', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "4ee963d4-3931-446a-9839-9213ca5359cf",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "AUTH USER - no credentials",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly AUTH USER - no credentials",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Auth User Invalid Credentials\",\n  \"value\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTY1MjUsImlhdCI6MTc1MjAxMTIyNCwiZXhwIjoxNzUyMDk3NjI0fQ.psicNKUMrKnH6UAwCOTSV6-QQdwdxqOoQe54CzTiNkY\"\n  }\n}",
              "code": "request(BASE_URL)\n    .post(auth_EndPoint)\n    .set('Content-Type', 'application/json')\n    //.send({ email: 'wrong@example.com', password: 'wrongpass' }) \n    .expect(401)           \n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Auth User Invalid Credentials', value: res.body });\n        done(err);\n    });",
              "err": {
                "message": "Error: expected 401 \"Unauthorized\", got 200 \"OK\"",
                "estack": "Error: expected 401 \"Unauthorized\", got 200 \"OK\"\n    at Context.<anonymous> (test/auth.test.js:246:14)\n    at processImmediate (node:internal/timers:466:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:310:14)\n    at /Users/yara.sayed1/Documents/my-auth-tests/node_modules/supertest/lib/test.js:366:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:343:13)\n    at Test.assert (node_modules/supertest/lib/test.js:196:23)\n    at localAssert (node_modules/supertest/lib/test.js:139:14)\n    at /Users/yara.sayed1/Documents/my-auth-tests/node_modules/supertest/lib/test.js:157:7\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:847:12)\n    at /Users/yara.sayed1/Documents/my-auth-tests/node_modules/superagent/lib/node/index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/parsers/json.js:21:7)\n    at IncomingMessage.emit (node:events:539:35)\n    at endReadableNT (node:internal/streams/readable:1345:12)\n    at processTicksAndRejections (node:internal/process/task_queues:83:21)",
                "diff": null
              },
              "uuid": "8c3b813d-da28-464a-a70a-101b22f3c42c",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH USER - No token",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly PATCH USER - No token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Patch User Without Token\",\n  \"value\": {\n    \"message\": \"jwt must be provided\"\n  }\n}",
              "code": "request(BASE_URL)\n    .patch(patch_EndPoint)\n    .set('Content-Type', 'application/json')\n    .send({ name: name })\n    .expect(403)            // Should be 401 but it's 403 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Patch User Without Token', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "6b8cd6b5-21fc-469e-81ed-2272148683ec",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH USER - invalid token",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly PATCH USER - invalid token",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Patch User Without Token\",\n  \"value\": {\n    \"message\": \"jwt malformed\"\n  }\n}",
              "code": "request(BASE_URL)\n    .patch(patch_EndPoint)\n    .set('Content-Type', 'application/json')\n    .set('Authorization', 'invalidtoken123')\n    .send({ name: name })\n    .expect(403)            // Should be 401 but it's 403 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Patch User Without Token', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "13757087-77c8-4b64-9b18-2bf84bb0942e",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PATCH USER - empty body",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly PATCH USER - empty body",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Patch User Without Token\",\n  \"value\": {}\n}",
              "code": "request(BASE_URL)\n    .patch(patch_EndPoint)\n    .set('Content-Type', contentType)\n    .set('Authorization', token)\n    .expect(403) // Should be 401 but it's 403 in mock_API\n    .end((err, res) => {\n        addContext(this, { title: 'Patch User Without Token', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "a9610218-fc92-44ce-88db-241729fd18e5",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET USER - Invalid token",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly GET USER - Invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Get User Invalid Token\",\n  \"value\": {\n    \"message\": \"Unauthorized\"\n  }\n}",
              "code": "request(BASE_URL)\n    .get(get_EndPoint)\n    .set('Content-Type', contentType)\n    .set('Authorization', invalidToken)\n    .expect(403)            // Should be 401 but it's 403 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Get User Invalid Token', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "90baa0ce-af7e-43fe-b142-ad304a7a0387",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET USER - no token",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly GET USER - no token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Get User Invalid Token\",\n  \"value\": {\n    \"message\": \"Unauthorized\"\n  }\n}",
              "code": "request(BASE_URL)\n    .get(get_EndPoint)\n    .set('Content-Type', contentType)\n    .set('Authorization', invalidToken)\n    .expect(403)            // Should be 401 but it's 403 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Get User Invalid Token', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "1d3eaba5-f718-43cb-be64-99a965bc549e",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE USER - No token",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly DELETE USER - No token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Delete User Without Token\",\n  \"value\": {\n    \"message\": \"Unauthorized to delete\"\n  }\n}",
              "code": "request(BASE_URL)\n    .delete(deleteUser_EndPoint)\n    .set('Content-Type', contentType)\n    .expect(403)            // Should be 401 but it's 403 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Delete User Without Token', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "7c35389b-eb44-4df8-8e7a-27900d980bba",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE USER - invalid token",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly DELETE USER - invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Delete User Without Token\",\n  \"value\": {\n    \"message\": \"Unauthorized to delete\"\n  }\n}",
              "code": "request(BASE_URL)\n    .delete(deleteUser_EndPoint)\n    .set('Content-Type', contentType)\n    .set('Authorization', invalidToken)\n    .expect(403)            // Should be 401 but it's 403 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Delete User Without Token', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "a5fc6136-90f4-400d-9831-74d485338120",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE ALL USERS - Invalid admin key",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly DELETE ALL USERS - Invalid admin key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Delete All Users Invalid Key\",\n  \"value\": {\n    \"message\": \"Unauthorized access\"\n  }\n}",
              "code": "request(BASE_URL)\n    .delete(deleteAllUsers_EndPoint)\n    .set('Content-Type', contentType) // for authorization\n    .send({ key_admin: wrongKeyAdmin })\n    .expect(403)           // Should be 401 but it's 403 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Delete All Users Invalid Key', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "2b4fdc6b-f849-4625-9f64-ad0494fe9a0d",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE ALL USERS - no admin key",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly DELETE ALL USERS - no admin key",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Delete All Users Invalid Key\",\n  \"value\": {\n    \"message\": \"Unauthorized access\"\n  }\n}",
              "code": "request(BASE_URL)\n    .delete(deleteAllUsers_EndPoint)\n    .set('Content-Type', contentType) // for authorization\n    .expect(403)           // Should be 401 but it's 403 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Delete All Users Invalid Key', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "66e1f9b9-94f7-46e6-8c0f-9e03959e9ae5",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE ALL USERS - no Content-Type Autherization",
              "fullTitle": "Test Suite 2 - Verify that API Routes for mock-user-auth handle INVALID paths/cases correctly DELETE ALL USERS - no Content-Type Autherization",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Delete All Users Invalid Key\",\n  \"value\": {\n    \"message\": \"Unauthorized access\"\n  }\n}",
              "code": "request(BASE_URL)\n    .delete(deleteAllUsers_EndPoint)\n    .expect(403)            // Should be 401 but it's 403 in mock_API\n    .expect(res => {\n        expect(res.body).to.have.property('message');\n    })\n    .end((err, res) => {\n        addContext(this, { title: 'Delete All Users Invalid Key', value: res.body });\n        done(err);\n    });",
              "err": {},
              "uuid": "10cac700-265f-4d80-bf9d-34b2721030fd",
              "parentUUID": "6d7974fe-5c88-4a50-841f-f0ff8ebab564",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e910a495-cb36-4f45-b614-e452a5b8f0fd",
            "71cc0aab-e8ab-423e-add1-ed665a323291",
            "4ee963d4-3931-446a-9839-9213ca5359cf",
            "6b8cd6b5-21fc-469e-81ed-2272148683ec",
            "13757087-77c8-4b64-9b18-2bf84bb0942e",
            "a9610218-fc92-44ce-88db-241729fd18e5",
            "90baa0ce-af7e-43fe-b142-ad304a7a0387",
            "1d3eaba5-f718-43cb-be64-99a965bc549e",
            "7c35389b-eb44-4df8-8e7a-27900d980bba",
            "a5fc6136-90f4-400d-9831-74d485338120",
            "2b4fdc6b-f849-4625-9f64-ad0494fe9a0d",
            "66e1f9b9-94f7-46e6-8c0f-9e03959e9ae5",
            "10cac700-265f-4d80-bf9d-34b2721030fd"
          ],
          "failures": [
            "d614d83f-5e74-460e-9947-95a4112940ad",
            "0bb477c7-efb5-4b66-9f38-454ffd125d03",
            "8c3b813d-da28-464a-a70a-101b22f3c42c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}